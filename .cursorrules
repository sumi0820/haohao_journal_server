.rules:
  # 1. Run the formatter before committing changes
  - id: run-formatter-before-commit
    when: preCommit
    description: "Before committing changes: Run the formatter and ensure there are no formatting errors"
    actions:
      - run: npm run format

  # 2. Commit changes after completing the implementation of a single feature or task
  - id: commit-changes-after-feature
    when: preCommit
    description: "After completing the implementation of a single feature or task: Commit the changes"
    actions:
      - run: echo "Commit the changes"

  # 3. Detect build or test errors at commit time and analyze before proceeding
  - id: analyze-build-or-test-errors
    when: onCommit
    description: "Build or test errors occur at commit time: Analyze the error messages and consider possible solutions before proceeding"
    actions:
      - run: echo "Analyze the error messages and consider possible solutions before proceeding"

  # 4. Use English for commit messages, code comments, and TODOs for consistency and clarity
  - id: enforce-english-in-messages
    when: preCommit
    description: "Writing commit messages, code comments, or TODOs: Use English for consistency and clarity"
    actions:
      - run: echo "Use English for consistency and clarity"

  # 5. Run the formatter to fix formatting errors when detected
  - id: fix-formatting-error
    when: preCommit
    description: "A formatting error is detected: Run the formatter to fix the issue before proceeding"
    actions:
      - run: npm run format

  # 6. Verify that tests pass after implementing a test
  - id: verify-test-pass
    when: onTestPass
    description: "After implementing a test: Verify that the test passes before proceeding"
    actions:
      - run: npm test

  # 7. Fix issues and ensure tests pass when a test fails
  - id: fix-failing-test
    when: onTestFail
    description: "A test fails: Fix the issue and ensure the test passes before proceeding"
    actions:
      - run: npm test

  # 8. Enforce Kotlin coding conventions and run KtLint and Detekt with specific settings
  - id: enforce-kotlin-style
    when: preCommit
    description: >
      Follow Kotlin official coding conventions (https://kotlinlang.org/docs/coding-conventions.html)
      and ensure code conforms to KtLint (v1.2.1) and Detekt (v1.23.5) static analysis tools
    actions:
      - run: ./gradlew ktlintCheck
      - run: ./gradlew detekt

  # 9. Limit the number of changed files in a single commit
  - id: limit-files-per-commit
    when: preCommit
    description: >
      Implement features in small units. Ensure that no more than 10 files are modified in a single commit.
    actions:
      - if: changedFiles.count > 10
        run: |
          echo "Too many files changed in one commit (limit: 10). Consider splitting into smaller feature units." && exit 1

  # 10. Prevent wildcard imports in Kotlin files
  - id: prevent-wildcard-imports
    when: preCommit
    description: >
      Avoid using wildcard imports (import foo.*) in Kotlin files for better code readability and maintainability.
      Each class, function, or property should be imported explicitly.
    actions:
      - run: |
          if grep -r "import.*\.\*" src/main/kotlin src/test/kotlin; then
            echo "Wildcard imports detected. Please import classes explicitly." && exit 1
          fi
